#@ load("@ytt:template", "template")
#@ load("@ytt:data", "data")
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.name
  labels: #@ data.values.defaultLabels
spec:
  replicas: 1
  selector:
    matchLabels:
      deployname: #@ data.values.name
  template:
    metadata:
      labels:
        _: #@ template.replace(data.values.defaultLabels)
        deployname: #@ data.values.name
    spec:
      serviceAccountName: #@ data.values.service_account
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node_type
#@ if data.values.env == 'prod':
                operator: NotIn
#@ else:
                operator: In
#@ end
                values:
                - release_surge
      containers:
      - name: #@ data.values.name
        image: #@ "europe-west3-docker.pkg.dev/healthy-saga-329513/sltech-briq/" + data.values.image_name + ":" + data.values.image_tag
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: #@ data.values.name
        - secretRef:
            name: #@ data.values.name
        resources:
          requests:
            cpu: #@ data.values.resources.cpu
            memory: #@ data.values.resources.memory
        #@ #command: ["gunicorn"]
        #@ #args: ["briq_api.proxy_fapi:app", "-k", "uvicorn.workers.UvicornWorker", "-b", "0.0.0.0:5000"]
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 3
          timeoutSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.name + "-redis"
  labels: #@ data.values.defaultLabels
spec:
  replicas: 1
  selector:
    matchLabels:
      deployname: #@ data.values.name + "-redis"
  template:
    metadata:
      labels:
        _: #@ template.replace(data.values.defaultLabels)
        deployname: #@ data.values.name + "-redis"
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node_type
#@ if data.values.env == 'prod':
                operator: NotIn
#@ else:
                operator: In
#@ end
                values:
                - release_surge
      containers:
      - name: redis
        image: "redis:7"
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            cpu: #@ "150m"
            memory: #@ "256Mi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.indexer.name
  labels: #@ data.values.defaultLabels
spec:
  replicas: 1
  selector:
    matchLabels:
      deployname: #@ data.values.indexer.name
  template:
    metadata:
      labels:
        _: #@ template.replace(data.values.defaultLabels)
        deployname: #@ data.values.indexer.name
    spec:
      serviceAccountName: #@ data.values.service_account
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node_type
#@ if data.values.env == 'prod':
                operator: NotIn
#@ else:
                operator: In
#@ end
                values:
                - release_surge
      containers:
      - name: "mongo"
        image: #@ data.values.indexer.image_store
        ports:
        - containerPort: 27017
          name: "mongo"
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: apibara
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: apibara
        resources:
          requests:
            cpu: #@ data.values.indexer.resources.cpu_store
            memory: #@ data.values.indexer.resources.memory_store
      - name: "sidecar"
      #@ # Hardcoded to avoid recreating the pods on new deployments.
        image: "europe-west3-docker.pkg.dev/healthy-saga-329513/sltech-briq/briq-api:df831f881988d4d8001c817ea341fcf9ec9a874f"
        command: ['/bin/sh', '-c']
        args:
          - wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2004-x86_64-100.7.2.deb;
            apt install ./mongodb-database-tools-ubuntu2004-x86_64-100.7.2.deb;
            uvicorn briq_api.indexer.backups:app --host 0.0.0.0 --port 8080;
        ports:
        - containerPort: 8080
          name: "sidecar"
        envFrom:
        - configMapRef:
            name: #@ data.values.name
        resources:
          requests:
            cpu: 50m
            memory: 100Mi
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.indexer.name + "-runner"
  labels: #@ data.values.defaultLabels
spec:
  replicas: 1
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      deployname: #@ data.values.indexer.name + "-runner"
  template:
    metadata:
      labels:
        _: #@ template.replace(data.values.defaultLabels)
        deployname: #@ data.values.indexer.name + "-runner"
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node_type
#@ if data.values.env == 'prod':
                operator: NotIn
#@ else:
                operator: In
#@ end
                values:
                - release_surge
      containers:
      - name: "indexer-runner"
        image: #@ "europe-west3-docker.pkg.dev/healthy-saga-329513/sltech-briq/" + data.values.image_name + ":" + data.values.image_tag
        envFrom:
        - configMapRef:
            name: #@ data.values.name
        - secretRef:
            name: #@ data.values.name
        resources:
          requests:
            cpu: #@ data.values.indexer.resources.cpu_runner
            memory: #@ data.values.indexer.resources.memory_runner 
        command: ["python3"]
        args: ["-m", "briq_api.indexer.runner"]
#@ if data.values.env == 'test':
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.indexer.name + "-mn-runner"
  labels: #@ data.values.defaultLabels
spec:
  replicas: 0
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      deployname: #@ data.values.indexer.name + "-mn-runner"
  template:
    metadata:
      labels:
        _: #@ template.replace(data.values.defaultLabels)
        deployname: #@ data.values.indexer.name + "-mn-runner"
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node_type
#@ if data.values.env == 'prod':
                operator: NotIn
#@ else:
                operator: In
#@ end
                values:
                - release_surge
      containers:
      - name: "indexer-runner"
        image: #@ "europe-west3-docker.pkg.dev/healthy-saga-329513/sltech-briq/" + data.values.image_name + ":" + data.values.image_tag
        envFrom:
        - configMapRef:
            name: #@ data.values.name
        - secretRef:
            name: #@ data.values.name
        env:
        - name: NETWORK_NAME
          value: 'starknet-mainnet'
        - name: INDEXER_ID
          value: #@ data.values.indexer.indexer_id + '-mn'
        resources:
          requests:
            cpu: #@ data.values.indexer.resources.cpu_runner
            memory: #@ data.values.indexer.resources.memory_runner 
        command: ["python3"]
        args: ["-m", "briq_api.indexer.runner"]
#@ end
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.name + "-set-indexer"
  labels: #@ data.values.defaultLabels
spec:
  replicas: 1
  selector:
    matchLabels:
      deployname: #@ data.values.name + "-set-indexer"
  template:
    metadata:
      labels:
        _: #@ template.replace(data.values.defaultLabels)
        deployname: #@ data.values.name + "-set-indexer"
    spec:
      serviceAccountName: #@ data.values.service_account
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node_type
#@ if data.values.env == 'prod':
                operator: NotIn
#@ else:
                operator: In
#@ end
                values:
                - release_surge
      containers:
      - name: "set-indexer"
        image: #@ "europe-west3-docker.pkg.dev/healthy-saga-329513/sltech-briq/" + data.values.image_name + ":" + data.values.image_tag
        ports:
        - containerPort: 5432
          name: "set-indexer"
        envFrom:
        - configMapRef:
            name: #@ data.values.name
        command: ["gunicorn"]
        args: ["briq_api.set_indexer.server:app", "-b", "0.0.0.0:5432", "-w", "1"]

#@ if data.values.env == 'prod':
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: #@ data.values.name
  labels: #@ data.values.defaultLabels
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: #@ data.values.name
  minReplicas: 1
  maxReplicas: 16
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 120
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
#@ end
